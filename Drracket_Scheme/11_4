(define reverseLS (lambda (L)
                    (cond
                      ((null? L) L)
                      ((list? (car L)) 
                       (append (reverseLS (cdr L)) (list(reverseLS (car L)))))
                      (else (append (reverseLS (cdr L)) (list (car L))))
                      )))
(reverseLS  '(1 2 9 5 0) ) 
(reverseLS  '(1 2 (9 5) 0) )
(reverseLS  '(1 (2 (9 5)) 0) )

(define myMap (lambda (f L)
                (cond
                  ((null? L) L)
                  (else (f (car L))(myMap f (cdr L))))))
(define f (lambda (x) 
    (+ x 1)))
(define L '( 1 9 3 4) )
(myMap f L)
(myMap sqrt '(0 1 4 9) )