(define getNth (lambda (L n)
    (if (= n 0) 
        (car L) 
        (getNth (cdr L) (- n 1)))))

(define nouns '("potato" "strawberry" "cucumber" "watermelon" "grapefruit" "honeydew" "tomato" "carrot" "plum" "orange"))
(define verbs '("add" "zip" "yawn" "allow" "question" "notice" "call" "damage" "guess" "imagine" "consider" "gather" "escape"))
(define adjectives '("beautiful" "fine" "soft" "medium" "rare" "fond" "devoted" "attentive" "considerate"))

(define getOne (lambda (L)
  (getNth L (random (length L)))))
(define getNoun (lambda ()
                  (getOne nouns)))
(define getVerb (lambda ()
                  (getOne verbs)))
(define getAdjective (lambda ()
                       (getOne adjectives)))
;(define getNoun (lambda (L)
;                           (getNth nouns (random (length L)))))
;(define getVerb (lambda (L)
;                           (getNth verbs (random (length L)))))
;(define getAdjective (lambda (L)
;                           (getNth getAdjective (random (length L)))))
(define sentence (lambda () 
                   (append 
                    (list "the" (getNoun) (getVerb)))))
(sentence)
(sentence)

(define displayList (lambda (L)
                      (begin
                        (display (car L))
                        (display " ")
                        (display (cadr L))
                        (display " ")
                        (display (caddr L))
                        (display ".")
                        (newline))))
;(define displayList (lambda (L)
;                      (if (null? L) 
;                          (begin (display ".")(newline))
;                          (begin (display (car L)) (display " ") (displayList (cdr L)))))) 

(displayList (sentence))
(displayList (sentence))
